{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        heards: requestConfig.heards ? requestConfig.heards : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n_s(useHttp, \"IZqqqWz/V3ktvStrxnSDjvHn4ZM=\");\nexport default useHttp;","map":{"version":3,"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","tasks","setTasks","sendRequest","response","fetch","url","method","heards","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["C:/RepositÃ³rios/Repository2023/mainReact2.0/my-task-app/src/components/Hooks/use-http.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = (requestConfig, applyData) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const sendRequest = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : \"GET\",\r\n        heards: requestConfig.heards ? requestConfig.heards : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  }, [requestConfig, applyData]);\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,MAAMC,OAAO,GAAG,CAACC,aAAa,EAAEC,SAAS,KAAK;EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,WAAW,GAAGV,WAAW,CAAC,YAAY;IAC1CK,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACV,aAAa,CAACW,GAAG,EAAE;QAC9CC,MAAM,EAAEZ,aAAa,CAACY,MAAM,GAAGZ,aAAa,CAACY,MAAM,GAAG,KAAK;QAC3DC,MAAM,EAAEb,aAAa,CAACa,MAAM,GAAGb,aAAa,CAACa,MAAM,GAAG,CAAC,CAAC;QACxDC,IAAI,EAAEd,aAAa,CAACc,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAChB,aAAa,CAACc,IAAI,CAAC,GAAG;MAClE,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MAClCnB,SAAS,CAACkB,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IAClD;IACAnB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,CAACH,aAAa,EAAEC,SAAS,CAAC,CAAC;EAE9B,OAAO;IACLC,SAAS;IACTE,KAAK;IACLI;EACF,CAAC;AACH,CAAC;AAAC,GAhCIT,OAAO;AAkCb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}