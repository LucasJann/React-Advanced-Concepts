{"ast":null,"code":"var _jsxFileName = \"C:\\\\Reposit\\xF3rios\\\\Repository2023\\\\mainReact2.0\\\\my-router-project-app\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    // const resData = await response.json();\n    // const res = new Response('any data', {status: 201});\n    return response;\n  }\n}\nexport function loader() {\n  defer();\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loadEvents","response","fetch","ok","status","loader","$RefreshReg$"],"sources":["C:/Reposit√≥rios/Repository2023/mainReact2.0/my-router-project-app/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer } from \"react-router-dom\";\r\n\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n\r\n  if (data.isError) {\r\n    return <p>{data.message}</p>;\r\n  }\r\n  const events = data.events;\r\n\r\n  return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: \"Could not fetch events.\" };\r\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json(\r\n      { message: \"Could not fetch events.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    // const resData = await response.json();\r\n    // const res = new Response('any data', {status: 201});\r\n    return response;\r\n  }\r\n}\r\n\r\nexport  function loader() {\r\n  defer()\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAE7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAE5B,IAAIQ,IAAI,CAACC,OAAO,EAAE;IAChB,oBAAOJ,OAAA;MAAAK,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAE1B,oBAAOX,OAAA,CAACF,UAAU;IAACa,MAAM,EAAEA;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACR,EAAA,CATQD,UAAU;EAAA,QACJN,aAAa;AAAA;AAAAiB,EAAA,GADnBX,UAAU;AAWnB,eAAeA,UAAU;AAEzB,eAAeY,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMpB,IAAI,CACR;MAAEU,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEW,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL;IACA;IACA,OAAOH,QAAQ;EACjB;AACF;AAEA,OAAQ,SAASI,MAAMA,CAAA,EAAG;EACxBrB,KAAK,CAAC,CAAC;AACT;AAAC,IAAAe,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}